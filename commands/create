#!/usr/bin/env bash

set -eu

source "${ADM_LIB}/functions.sh"

function print_usage () {
  cat << EOT
Usage: ${ADM} create [options] <name> [alias...]
Options:
 --app, -a                Switch to Application mode. See below for what that means.
 --user=<user>, -u <user> Override default user name.
 --home=<home>, -h <home> Override default home directory.
 --php[=#], -p[#]         Enable PHP at version '#' (default: ${DEFAULT_PHP_VERSION}).
 --node[=#], -n[#]        Enable NodeJS at version '#' (default: ${DEFAULT_NODE_VERSION}).
 --ssl, -s                Obtain Let's Encrypt certificate for <name> and all aliases.
 --allow-others, -o       Make home directory and its contents world-readable.
 --yes, -y                Do not ask for confirmation.

The utility operates in one of two modes:

Site:
 - UID and GID range is 2000-2999
 - default user and group name is the prefix 'cst-', followed by <name> with leading
   'www.' stripped and remaining domain names in reverse order separated by '-'
 - user is added to the 'www-data' group and the 'www-data' user is added to the user's group
 - default home directory is '/srv/http/<name>' (with leading 'www.' stripped from <name>)
 - a Nginx vhost config is generated and enabled

App:
 - UID and GID are generated in the usual range for system users
 - default user and group name is <name>
 - default home directory is '/opt/<name>'
 - aliases are converted to symlinks:
    - 'foo': /usr/local/bin/foo -> /opt/<name>/.bin/foo
    - 'foo=bar': /usr/local/bin/foo -> /opt/<name>/.bin/bar
 - Let's Encrypt certificates are never generated


EOT
  exit 1
}

name=""
aliases=""
aliases_arr=()
app=""
php=""
node=""
user_name=""
home_dir=""
ssl=""
others=""
yes=""

if ! temp=$( getopt --options 'p::n::u:h:say' --longoptions 'php::,node::,user:,home:,ssl,app,yes' --name "${ADM} create" -- "$@" ); then
  print_usage
fi

eval set -- "$temp"
unset temp

while [[ "$#" -gt 0 ]]; do
  case "$1" in
    '-p'|'--php')
      php="${2:-$DEFAULT_PHP_VERSION}"
      shift 2
      ;;
    '-n'|'--node')
      node="${2:-$DEFAULT_NODE_VERSION}"
      shift 2
      ;;
    '-u'|'--user')
      user_name="${2}"
      shift 2
      ;;
    '-h'|'--home')
      home_dir="${2}"
      shift 2
      ;;
    '-s'|'--ssl')
      ssl=1
      shift
      ;;
    '-o'|'--allow-others')
      others=1
      shift
      ;;
    '-a'|'--app')
      app=1
      shift
      ;;
    '-y'|'--yes')
      yes=1
      shift
      ;;
    '--')
      shift
      break
      ;;
  esac
done

if [[ "$#" -lt 1 ]]; then
  print_usage
fi

name="$1"
shift

while [[ "$#" -gt 0 ]]; do
  aliases="${aliases}${aliases:+ }$1"
  aliases_arr+=("$1")
  shift
done

if [[ -n "${php}" ]]; then
  php="$( "${ADM}" resolve /etc/php "${php}" )"
fi

if [[ -n "${node}" ]]; then
  node="$( "${ADM}" resolve /opt/node "${node}" )"
fi

if [[ -z "${user_name}" ]]; then
  if [[ -n "${app}" ]]; then
    user_name="${name}"
  else
    user_name="cst-$( sed -Ee 's/^www\.|\.[^.]+$//g' -e ':a' -e 's/([^.]+)\.([^.]+)$/\2-\1/' -e 'ta' <<< "${name}" )"
  fi
fi

if [[ -z "${home_dir}" ]]; then
  if [[ -n "${app}" ]]; then
    home_dir="/opt/${name}"
  else
    home_dir="/srv/http/${name#www.}"
  fi
fi

if [[ "${user_name}" == "root" ]]; then
  if [[ -z "${app}" ]]; then
    echo "User 'root' is only allowed in app mode"
    exit 1
  fi
elif [[ -n "$( getent passwd "${user_name}" )" ]]; then
  echo "User ${user_name} already exists"
  exit 1
fi

if [[ -x "${home_dir}" ]]; then
  echo "Home directory ${home_dir} already exists"
  exit 1
fi

if [[ -n "${app}" && -n "${ssl}" ]]; then
  echo "Error: cannot create Let's Encrypt certificates in App mode"
  exit 1
elif [[ -n "${ssl}" && -z "${CERTBOT_AUTHENTICATOR:+x}" ]]; then
  echo "Error: Certbot authenticator not configured, please edit ${ADM_ROOT}/config.env"
  exit 1
fi

if [[ -n "${app}" ]]; then
  for alias in "${aliases_arr[@]}"; do
  	alias="$( cut -d= -f1 <<< "${alias}" )"

  	if [[ -e "/usr/local/bin/${alias}" ]]; then
  		echo "Invalid alias '${alias}': file '/usr/local/bin/${alias}' exists"
  		exit 1
  	fi
  done
fi

echo "Summary:"
echo " - Name: ${name}"

if [[ -n "${aliases}" ]]; then
  echo " - Aliases: ${aliases}"
fi

echo " - PHP: ${php:-none}"
echo " - Node: ${node:-none}"
echo " - SSL: ${ssl:-0}"
echo " - User name: ${user_name}"
echo " - Home directory: ${home_dir} ${others:+(o+rX)}"

if [[ -z "${yes}" ]]; then
  read -rp "Proceed? [Y/n] "

  if [[ -n "${REPLY}" && ! "${REPLY}" =~ [yY] ]]; then
    echo "Aborted."
    exit
  fi
fi

install_opts=(-u "${user_name}" -h "${home_dir}")
perms="g-w,o-rwx"
mask="027"
sudo=""

if [[ -n "${others}" ]]; then
  install_opts+=(-o)
  perms="go-w"
  mask="022"
fi

if [[ "${user_name}" != "root" ]]; then
  sudo="sudo -u ${user_name}"
  args=()

  if [[ -z "${app}" ]]; then
    args+=(
      --key SYS_UID_MIN=2000
      --key SYS_UID_MAX=2999
      --key SYS_GID_MIN=2000
      --key SYS_GID_MAX=2999
    )
  fi

  useradd \
    --system \
    --create-home \
    --home-dir "${home_dir}" \
    --skel "${ADM_RESOURCES}/skel" \
    --shell /bin/bash \
    --user-group \
    "${args[@]}" \
    --key UMASK=${mask} \
    --comment "${name},,,,UMASK=${mask}" \
    "${user_name}"

  if [[ -z "${app}" ]]; then
    adduser "${user_name}" www-data
    adduser www-data "${user_name}"
  fi
else
  mkdirp "${home_dir}" "${user_name}" "${perms}"
fi

find "${home_dir}" -type f -name '.keep' -delete
chmod -R "${perms}" "${home_dir}"

if [[ "${user_name}" != "root" ]]; then
  loginctl enable-linger "${user_name}"
  systemctl start "user@$( id -u "${user_name}" ).service"

  if [[ -n "${SSH_IMPORT:+x}" ]]; then
    $sudo ssh-import-id "${SSH_IMPORT}"
  fi

  if [[ -n "${php}" ]]; then
    ${ADM} install "${install_opts[@]}" -s "$( which "php${php}" )" .bin/php

    if [[ -z "${app}" ]]; then
      ${ADM} install "${install_opts[@]}" -s "$( which "php-fpm${php}" )" .bin/php-fpm
      ${ADM} install "${install_opts[@]}" config/php/fpm.service .config/systemd/user/fpm.service
      ${ADM} install "${install_opts[@]}" config/php/fpm.ini .config/php/fpm.ini
      ${ADM} install "${install_opts[@]}" config/php/fpm.tpl.sh .config/php/fpm.conf -v name="${name}"
    fi

    mkdirp "${home_dir}/.log/php" "${user_name}" "${perms}"
  fi

  if [[ -n "${node}" ]]; then
    ${ADM} install "${install_opts[@]}" -s "/opt/node/${node}/bin/corepack" .bin/corepack
    ${ADM} install "${install_opts[@]}" -s "/opt/node/${node}/bin/node" .bin/node
    ${ADM} install "${install_opts[@]}" -s "/opt/node/${node}/bin/npm" .bin/npm
    ${ADM} install "${install_opts[@]}" -s "/opt/node/${node}/bin/npx" .bin/npx
  fi
fi

"${ADM}" scaffold ${others:+-o} "${home_dir}"

if [[ -n "${app}" ]]; then
  mkdirp "${home_dir}/current/bin" "${user_name}" "${perms}"

  for alias in "${aliases_arr[@]}"; do
    binary="$( cut -d= -f2 <<< "${alias}" )"
    alias="$( cut -d= -f1 <<< "${alias}" )"
    ${ADM} install "${install_opts[@]}" stub.sh "current/bin/${binary}"

    if [[ "${user_name}" == "root" ]]; then
      ln -s "${home_dir}/current/bin/${binary}" "/usr/local/bin/${alias}"
    else
      sudo -u "${user_name}" ln -s "${home_dir}/current/bin/${binary}" "${home_dir}/.bin/${alias}"
      ln -s "${home_dir}/.bin/${alias}" "/usr/local/bin/${alias}"
    fi
  done
else
  sudo -u "${user_name}" -i << EOT
mkdir "${home_dir}/current/public"
echo 'It works!' > "${home_dir}/current/public/index.html"

mkdir -p "${home_dir}/.log/nginx"
ln -s "/var/log/nginx/access.${name#www.}.log" "${home_dir}/.log/nginx/access"
ln -s "/var/log/nginx/error.${name#www.}.log" "${home_dir}/.log/nginx/error"
EOT

  ${ADM} install config/nginx/site.tpl.sh "/etc/nginx/sites-available/${name#www.}.conf" \
    -v name="${name}" -v home_dir="${home_dir}" -v aliases="${aliases}" \
    -v php="${php}" -v node="${node}" -v ssl="${ssl}"
  ln -s "../sites-available/${name#www.}.conf" "/etc/nginx/sites-enabled/${name#www.}"

  if [[ -n "${ssl}" ]]; then
    certbot_domains=('-d' "${name}")

    for alias in "${aliases_arr[@]}"; do
      certbot_domains+=('-d' "${alias}")
    done

    certbot \
      certonly \
      --agree-tos \
      --non-interactive \
      --authenticator "${CERTBOT_AUTHENTICATOR}" \
      --post-hook '/bin/systemctl reload nginx' \
      "${certbot_domains[@]}"
  fi
fi

services=()

if [[ "${user_name}" != "root" ]]; then
  ${ADM} install "${install_opts[@]}" config/logrotate/logrotate.tpl.sh .config/logrotate.conf -v home_dir="${home_dir}"
  ${ADM} install "${install_opts[@]}" config/logrotate/logrotate.service .config/systemd/user/logrotate.service
  ${ADM} install "${install_opts[@]}" config/logrotate/logrotate.timer .config/systemd/user/logrotate.timer
  services+=(logrotate.timer)
fi

if [[ -z "${app}" && -n "${php}" ]]; then
  services+=(fpm.service)
fi

if [[ "${#services[@]}" -gt "0" ]]; then
  sudo -u "${user_name}" -i << EOT
export XDG_RUNTIME_DIR="/run/user/$( id -u "${user_name}" )"
systemctl --user daemon-reload
systemctl --user enable --now ${services[@]}
EOT
fi

if [[ -z "${app}" ]]; then
  if [[ -n "$( command -v fail2ban-client )" && -n "${php}" || -n "${node}" ]]; then
    sudo -u "${user_name}" mkdir "${home_dir}/.log/app"
    sudo -u "${user_name}" touch "${home_dir}/.log/app/auth.log"
    fail2ban-client reload >/dev/null 2>&1 || true
  fi

  systemctl restart nginx

  echo "Testing site..."
  curl -sSf \
    --resolve "${name}:80:127.0.0.1" \
    --resolve "${name}:443:127.0.0.1" \
    "http${ssl:+s}://${name}/"
fi

echo "All finished."
