#!/usr/bin/env bash

set -eu

function print_usage () {
  cat << EOT
Usage: ${ADM_CMD} create [options] <name> [alias...]
Options:
 --app, -a                Switch to Application mode. See below for what that means.
 --user=<user>, -u <user> Override default user name.
 --home=<home>, -h <home> Override default home directory.
 --php[=#], -p[#]         Enable PHP at version '#' (default: ${DEFAULT_PHP_VERSION}).
 --node[=#], -n[#]        Enable NodeJS at version '#' (default: ${DEFAULT_NODE_VERSION}).
 --ssl, -s                Obtain Let's Encrypt certificate for <name> and all aliases.
 --yes, -y                Do not ask for confirmation.

The utility operates in one of two modes:

Site:
 - UID and GID range is 2000-2999
 - default user and group name is the prefix 'cst-', followed by <name> with leading
   'www.' stripped and remaining domain names in reverse order separated by '-'
 - user is added to the 'www-data' group and the 'www-data' user is added to the user's group
 - default home directory is '/srv/http/<name>' (with leading 'www.' stripped from <name>)
 - a Nginx vhost config is generated and enabled

App:
 - UID and GID are generated in the usual range for system users
 - default user and group name is <name>
 - default home directory is '/opt/<name>'
 - aliases are converted to symlinks:
    - 'foo': /usr/local/bin/foo -> /opt/<name>/.bin/foo
    - 'foo=bar': /usr/local/bin/foo -> /opt/<name>/.bin/bar
 - Let's Encrypt certificates are never generated


EOT
  exit 1
}

# usage: resolve_version <variable> <friendly name> <version> <directory> <pattern>
# will search <directory> for files or directories starting with <pattern>;
# if none are found, outputs an error message using <friendly name> and <version>;
# if more than one are found allows the user to select one interactively;
# sets the <variable> to the result
function resolve_version () {
  local var_name="$1"
  local friendly_name="$2"
  local version="$3"
  local dir="$4"
  local pattern="${5:-$version}"
  local matches=()
  readarray -t matches < <( find "${dir}" -maxdepth 2 -regex "${dir}/${pattern}[^/]*" -exec basename "{}" \; )

  if [[ "${#matches[@]}" -eq 0 ]]; then
    echo "Invalid ${friendly_name} version '${version}'"
    exit 1
  elif [[ "${#matches[@]}" -eq 1 ]]; then
    export "${var_name}=${matches[0]}"
  else
    echo "Please clarify ${friendly_name} version:"

    select match in "${matches[@]}"; do
      if [[ -n "${match}" ]]; then
        export "${var_name}=${match}"
        echo ""
        break
      fi
    done
  fi
}

name=""
aliases=""
aliases_arr=()
app=""
php=""
node=""
user_name=""
home_dir=""
ssl=""
yes=""

if ! temp=$( getopt --options 'p::n::u:h:say' --longoptions 'php::,node::,user:,home:,ssl,app,yes' --name "${ADM_CMD} create" -- "$@" ); then
  print_usage
fi

eval set -- "$temp"
unset temp

while [[ "$#" -gt 0 ]]; do
  case "$1" in
    '-p'|'--php')
      php="${2:-$DEFAULT_PHP_VERSION}"
      shift 2
      ;;
    '-n'|'--node')
      node="${2:-$DEFAULT_NODE_VERSION}"
      shift 2
      ;;
    '-u'|'--user')
      user_name="${2}"
      shift 2
      ;;
    '-h'|'--home')
      home_dir="${2}"
      shift 2
      ;;
    '-s'|'--ssl')
      ssl=1
      shift
      ;;
    '-a'|'--app')
      app=1
      shift
      ;;
    '-y'|'--yes')
      yes=1
      shift
      ;;
    '--')
      shift
      break
      ;;
  esac
done

if [[ "$#" -lt 1 ]]; then
  print_usage
fi

name="$1"
shift

while [[ "$#" -gt 0 ]]; do
  aliases="${aliases}${aliases:+ }$1"
  aliases_arr+=("$1")
  shift
done

if [[ -n "${php}" ]]; then
  resolve_version php PHP "${php}" /etc/php
fi

if [[ -n "${node}" ]]; then
  resolve_version node Node "${node}" /opt/node "v?${node}"
fi

if [[ -z "${user_name}" ]]; then
  if [[ -n "${app}" ]]; then
    user_name="${name}"
  else
    user_name="cst-$( sed -Ee 's/^www\.|\.[^.]+$//g' -e ':a' -e 's/([^.]+)\.([^.]+)$/\2-\1/' -e 'ta' <<< "${name}" )"
  fi
fi

if [[ -z "${home_dir}" ]]; then
  if [[ -n "${app}" ]]; then
    home_dir="/opt/${name}"
  else
    home_dir="/srv/http/${name#www.}"
  fi
fi

if [[ -n "$( getent passwd "${user_name}" )" ]]; then
  echo "User ${user_name} already exists"
  exit 1
fi

if [[ -x "${home_dir}" ]]; then
  echo "Home directory ${home_dir} already exists"
  exit 1
fi

if [[ -n "${app}" && -n "${ssl}" ]]; then
  echo "Error: cannot create Let's Encrypt certificates in App mode"
  exit 1
elif [[ -n "${ssl}" && -z "${CERTBOT_AUTHENTICATOR:+x}" ]]; then
  echo "Error: Certbot authenticator not configured, please edit ${ADM_ROOT}/config.env"
  exit 1
fi

if [[ -n "${app}" ]]; then
  for alias in "${aliases_arr[@]}"; do
    alias="$( cut -d= -f1 <<< "${alias}" )"

    if [[ -e "/usr/local/bin/${alias}" ]]; then
      echo "Invalid alias '${alias}': file '/usr/local/bin/${alias}' exists"
      exit 1
    fi
  done
fi

echo "Summary:"
echo " - Name: ${name}"

if [[ -n "${aliases}" ]]; then
  echo " - Aliases: ${aliases}"
fi

echo " - PHP: ${php:-none}"
echo " - Node: ${node:-none}"
echo " - SSL: ${ssl:-0}"
echo " - User name: ${user_name}"
echo " - Home directory: ${home_dir}"

if [[ -z "${yes}" ]]; then
  read -rp "Proceed? [Y/n] "

  if [[ -n "${REPLY}" && ! "${REPLY}" =~ [yY] ]]; then
    echo "Aborted."
    exit
  fi
fi

# usage: install_resource <name> <dst>
# if <dst> is relative, installs to $home_dir and sets $user_name as owner,
# otherwise owner is root
function install_resource () {
  local rsc_path="${ADM_RESOURCES}/$1"
  local dst_path="$2"
  local dst_user="root"

  if [[ ! "$dst_path" =~ ^/ ]]; then
    dst_path="${home_dir}/$2"
    dst_user="${user_name}"
  fi

  sudo -u "${dst_user}" mkdir -pm 0750 "$( dirname "${dst_path}" )"

  if [[ -f "${rsc_path}" ]]; then
    if [[ "${rsc_path}" =~ \.tpl\.sh$ ]]; then
      export name aliases php node ssl user_name home_dir
      "${rsc_path}" > "${dst_path}"
      export -n name aliases php node ssl user_name home_dir
    else
      cat "${rsc_path}" > "${dst_path}"
    fi

    chown "${dst_user}:${dst_user}" "${dst_path}"
    chmod g-w,o-rwx "${dst_path}"
  else
    rsync -a \
      --chown "${dst_user}:${dst_user}" \
      --chmod "g-w,o-rwx" \
      "${rsc_path}" \
      "${dst_path}"
  fi
}

args=()

if [[ -z "${app}" ]]; then
  args+=(
    --key SYS_UID_MIN=2000
    --key SYS_UID_MAX=2999
    --key SYS_GID_MIN=2000
    --key SYS_GID_MAX=2999
  )
fi

useradd \
  --system \
  --create-home \
  --home-dir "${home_dir}" \
  --skel "${ADM_RESOURCES}/skel" \
  --shell /bin/bash \
  --user-group \
  "${args[@]}" \
  --key UMASK=027 \
  --comment "${name},,,,UMASK=027" \
  "${user_name}"

if [[ -z "${app}" ]]; then
  adduser "${user_name}" www-data
  adduser www-data "${user_name}"
fi

find "${home_dir}" -type f -name '.keep' -delete
chmod -R g-w,o-rwx "${home_dir}"

loginctl enable-linger "${user_name}"
systemctl start "user@$( id -u "${user_name}" ).service"

if [[ -n "${SSH_IMPORT:+x}" ]]; then
  sudo -u "${user_name}" ssh-import-id "${SSH_IMPORT}"
fi

if [[ -n "${php}" ]]; then
  sudo -u "${user_name}" ln -s "$( which "php${php}" )" "${home_dir}/.bin/php"

  if [[ -z "${app}" ]]; then
    sudo -u "${user_name}" ln -s "$( which "php-fpm${php}" )" "${home_dir}/.bin/php-fpm"
    install_resource config/php/fpm.service .config/systemd/user/fpm.service
    install_resource config/php/fpm.tpl.sh .config/php/fpm.conf
    install_resource config/php/fpm.ini .config/php/fpm.ini
  fi

  sudo -u "${user_name}" mkdir -p "${home_dir}/.log/php"
fi

if [[ -n "${node}" ]]; then
  sudo -u "${user_name}" ln -s "/opt/node/${node}/bin/corepack" "${home_dir}/.bin/corepack"
  sudo -u "${user_name}" ln -s "/opt/node/${node}/bin/node" "${home_dir}/.bin/node"
  sudo -u "${user_name}" ln -s "/opt/node/${node}/bin/npm" "${home_dir}/.bin/npm"
  sudo -u "${user_name}" ln -s "/opt/node/${node}/bin/npx" "${home_dir}/.bin/npx"
fi

if [[ -n "${app}" ]]; then
  sudo -u "${user_name}" -i << EOT
mkdir -p "${home_dir}/releases/000-default/bin"
ln -s "${home_dir}/releases/000-default" "${home_dir}/current"
EOT

  for alias in "${aliases_arr[@]}"; do
    binary="$( cut -d= -f2 <<< "${alias}" )"
    alias="$( cut -d= -f1 <<< "${alias}" )"
    install_resource stub.sh "current/bin/${binary}"
    sudo -u "${user_name}" ln -s "${home_dir}/current/bin/${binary}" "${home_dir}/.bin/${binary}"
    ln -s "${home_dir}/.bin/${binary}" "/usr/local/bin/${alias}"
  done
else
  sudo -u "${user_name}" -i << EOT
mkdir -p "${home_dir}/releases/000-default/public"
echo 'It works!' > "${home_dir}/releases/000-default/public/index.html"
ln -s "${home_dir}/releases/000-default" "${home_dir}/current"

mkdir -p "${home_dir}/.log/nginx"
ln -s "/var/log/nginx/access.${name#www.}.log" "${home_dir}/.log/nginx/access"
ln -s "/var/log/nginx/error.${name#www.}.log" "${home_dir}/.log/nginx/error"
EOT

  install_resource config/nginx/site.tpl.sh "/etc/nginx/sites-available/${name#www.}.conf"
  ln -s "../sites-available/${name#www.}.conf" "/etc/nginx/sites-enabled/${name#www.}"

  if [[ -n "${ssl}" ]]; then
    certbot_domains=('-d' "${name}")

    for alias in "${aliases_arr[@]}"; do
      certbot_domains+=('-d' "${alias}")
    done

    certbot \
      certonly \
      --agree-tos \
      --non-interactive \
      --authenticator "${CERTBOT_AUTHENTICATOR}" \
      --post-hook '/bin/systemctl reload nginx' \
      "${certbot_domains[@]}"
  fi
fi

install_resource config/logrotate/logrotate.tpl.sh .config/logrotate.conf
install_resource config/logrotate/logrotate.service .config/systemd/user/logrotate.service
install_resource config/logrotate/logrotate.timer .config/systemd/user/logrotate.timer

services="logrotate.timer"

if [[ -z "${app}" && -n "${php}" ]]; then
  services="${services} fpm.service"
fi

sudo -u "${user_name}" -i << EOT
export XDG_RUNTIME_DIR="/run/user/$( id -u "${user_name}" )"
systemctl --user daemon-reload
systemctl --user enable --now ${services}
EOT

if [[ -z "${app}" ]]; then
  systemctl restart nginx

  echo "Testing site..."
  curl -sSf \
    --resolve "${name}:80:127.0.0.1" \
    --resolve "${name}:443:127.0.0.1" \
    "http${ssl:+s}://${name}/"
fi

echo "All finished."
